#!/usr/bin/env php
<?php

declare(strict_types=1);

use LTO\Account;

chdir(__DIR__ . '/..');

require 'vendor/autoload.php';

if ($argc < 2) {
    echo "USAGE: shipsync LAST_UPDATED\n";
    exit(1);
}

$lastUpdated = new \DateTimeImmutable($argv[1]);

App::init();
$container = App::getContainer();

$account = $container->get(Account::class);
$participants = $container->get('participants');
$sync = $container->get(ShipSync::class);
$gateway = $container->get(EventChainGateway::class);
$eventManager = $container->get(EventManager::class)->withoutStoringShips();
$shipCodes = $sync->fetchShipCodes();

foreach ($shipCodes as $shipCode) {
    $event = $sync->createEvent($shipCode, $lastUpdated);

    if ($event === null) {
        continue;
    }

    /** @var EventChain $chainEntity */
    $chainId = $sync->getEventChainId($account, $shipCode);
    $chainEntity = $gateway->fetch($chainId);

    $chain = $chainEntity === null
        ? $sync->createEventChain($account, $shipCode)
        : new LTO\EventChain($chainId, $chainEntity->getLatestHash());

    foreach ($participants as ['account' => $otherAccount, 'node' => $otherNode]) {
        $chain->add($sync->createIdentityEvent($otherAccount, $otherNode))->signWith($account);
    }

    $chain->add($event)->signWith($account);

    $origChain = $chainEntity ?? new EventChain();
    $origChain->id ??= $chainId;

    $validation = $eventManager->add($origChain, EventChain::fromLtoEventChain($chain));

    echo "$shipCode:\n", join("\n", $validation->getErrors());
}

